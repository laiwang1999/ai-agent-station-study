<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.yang.infrastructure.persistent.dao.IAdminUserDao">

    <resultMap id="AdminUserMap" type="cn.yang.infrastructure.persistent.po.AdminUser">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <insert id="insert" parameterType="cn.yang.infrastructure.persistent.po.AdminUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO admin_user (
            user_id, username, password, status, create_time, update_time
        ) VALUES (
            #{userId}, #{username}, #{password}, #{status}, #{createTime}, #{updateTime}
        )
    </insert>

    <update id="updateById" parameterType="cn.yang.infrastructure.persistent.po.AdminUser">
        UPDATE admin_user SET
            user_id = #{userId},
            username = #{username},
            password = #{password},
            status = #{status},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <update id="updateByUserId" parameterType="cn.yang.infrastructure.persistent.po.AdminUser">
        UPDATE admin_user SET
            username = #{username},
            password = #{password},
            status = #{status},
            update_time = #{updateTime}
        WHERE user_id = #{userId}
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM admin_user WHERE id = #{id}
    </delete>

    <delete id="deleteByUserId" parameterType="java.lang.String">
        DELETE FROM admin_user WHERE user_id = #{userId}
    </delete>

    <select id="queryById" parameterType="java.lang.Long" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        WHERE id = #{id}
    </select>

    <select id="queryByUserId" parameterType="java.lang.String" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        WHERE user_id = #{userId}
    </select>

    <select id="queryByUsername" parameterType="java.lang.String" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        WHERE username = #{username}
    </select>

    <select id="queryEnabledUsers" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        WHERE status = 1
        ORDER BY create_time DESC
    </select>

    <select id="queryByStatus" parameterType="java.lang.Integer" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        WHERE status = #{status}
        ORDER BY create_time DESC
    </select>

    <select id="queryAll" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        ORDER BY create_time DESC
    </select>

    <select id="queryByUsernameAndPassword" resultMap="AdminUserMap">
        SELECT id, user_id, username, password, status, create_time, update_time
        FROM admin_user
        WHERE username = #{username} AND password = #{password} AND status = 1
    </select>

</mapper>